{"version":3,"file":"component---src-pages-admin-jsx-f7e9dd17001b191c187e.js","mappings":"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","sources":["webpack://home-finder/./src/components/AdminForm.jsx","webpack://home-finder/./src/pages/Admin.jsx"],"sourcesContent":["import { useCallback, useMemo, useState } from 'react';\r\nimport { Button, FormControl } from '@material-ui/core';\r\nimport { GoogleFormProvider, useGoogleForm } from 'react-google-forms-hooks';\r\nimport PropTypes from 'prop-types';\r\nimport { useIntl } from 'gatsby-plugin-react-intl';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames';\r\n\r\n// Constants\r\nimport { LONG_ANSWER, SHORT_ANSWER } from './google-forms-inputs/input-types';\r\nimport { SUCCESS_MESSAGE_TYPE } from '../utils/constants';\r\n\r\n// Components\r\nimport ShortAnswerInput from './google-forms-inputs/ShortAnswerInput';\r\nimport LongAnswerInput from './google-forms-inputs/LongAnswerInput';\r\nimport SnackBarAlert from './SnackBarAlert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    copyBlockWrapper: {\r\n        marginTop: '20px',\r\n    },\r\n    copyWrapper: {\r\n        display: 'flex',\r\n    },\r\n    copyButton: {\r\n        marginLeft: '10px',\r\n        display: 'block',\r\n    },\r\n    submitButton: {\r\n        marginTop: '20px',\r\n        display: 'block',\r\n    },\r\n    addLinksButton: {\r\n        marginTop: '10px',\r\n        display: 'block',\r\n    },\r\n    linkInput: {\r\n        display: 'flex',\r\n    },\r\n    paragraph: {\r\n        marginBottom: '10px',\r\n    },\r\n    formWrapper: {\r\n        display: 'flex',\r\n    }\r\n}));\r\n\r\nfunction AdminForm({\r\n    googleFormData,\r\n    onSubmit = () => {},\r\n    className = null,\r\n    urlSecret,\r\n}) {\r\n    const intl = useIntl();\r\n    const [isShowingSnackbar, setIsShowingSnackbar] = useState(false);\r\n    const [isFormSubmitted, setIsFormSubmitted] = useState(false);\r\n    const classes = useStyles();\r\n    const formMethods = useGoogleForm({ form: googleFormData });\r\n    const { submitToGoogleForms, formState, handleSubmit } = formMethods;\r\n    // console.log('>>> Here are the errors!!!', formState.errors);\r\n\r\n    const formBody = useMemo(() => {\r\n        return googleFormData.fields.map((field) => {\r\n            const { id, type, label } = field;\r\n            const extraProps = {\r\n                id,\r\n                label,\r\n                style: { display: 'none' },\r\n                value: 'test@test.com',\r\n                ...label === 'secret' && { value: urlSecret },\r\n                ...label === 'disable' && { value: 'true' },\r\n            };\r\n\r\n            if (type === SHORT_ANSWER) {\r\n                return (\r\n                    <ShortAnswerInput\r\n                        key={id}\r\n                        {...extraProps}\r\n                    />\r\n                );\r\n            } else if (type === LONG_ANSWER) {\r\n                return (\r\n                    <LongAnswerInput\r\n                        key={id}\r\n                        {...extraProps}\r\n                    />\r\n                );\r\n            }\r\n\r\n            return null;\r\n        });\r\n    }, [googleFormData.fields, urlSecret]);\r\n\r\n    const onFormSubmit = useCallback((data, event) => {\r\n        setIsFormSubmitted(true);\r\n\r\n        submitToGoogleForms(data).then(() => {\r\n            event.target.reset();\r\n            setIsShowingSnackbar(true);\r\n            setIsFormSubmitted(false);\r\n        });\r\n        onSubmit();\r\n    }, [onSubmit, submitToGoogleForms]);\r\n\r\n    const handleCloseSnackbar = useCallback(() => {\r\n        setIsShowingSnackbar(false);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={classNames(className, classes.formWrapper)}>\r\n                <GoogleFormProvider {...formMethods}>\r\n                    <form onSubmit={handleSubmit(onFormSubmit)}>\r\n                        {formBody}\r\n                        <Button\r\n                            className={classes.submitButton}\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            type=\"submit\"\r\n                            key=\"submit-button\"\r\n                            disabled={isFormSubmitted}\r\n                        >\r\n                            {intl.formatMessage({ id: 'unsubscribe' })}\r\n                        </Button>\r\n                    </form>\r\n                </GoogleFormProvider>\r\n            </FormControl>\r\n            <SnackBarAlert\r\n                onClose={handleCloseSnackbar}\r\n                severity={SUCCESS_MESSAGE_TYPE}\r\n                show={isShowingSnackbar}\r\n                messageKey=\"your_data_submitted\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nAdminForm.propTypes = {\r\n    googleFormData: PropTypes.object.isRequired,\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default AdminForm;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\nimport { useIntl, navigate } from 'gatsby-plugin-react-intl';\r\nimport { useMemo } from 'react';\r\nimport { validate } from 'uuid';\r\n\r\n// Utils\r\nimport { isClient } from '../utils/gatsby-frontend-helpers';\r\n\r\n// Components\r\nimport SEO from '../components/SEO';\r\nimport Layout from '../components/Layout';\r\nimport AdminForm from '../components/AdminForm';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n    subtitle: {\r\n        marginTop: '2px',\r\n    },\r\n    paragraph: {\r\n        marginBottom: '10px',\r\n    },\r\n    pageContent: {\r\n        padding: '5px',\r\n        '& a': {\r\n            color: '#8da4f7',\r\n        },\r\n        '& a:visited': {\r\n            color: '#48578a',\r\n        },\r\n    },\r\n}));\r\n\r\nconst HomePage = ({ pageContext }) => {\r\n    const intl = useIntl();\r\n    const classes = useStyles();\r\n    const { googleFormData } = pageContext;\r\n\r\n    const urlSecret = useMemo(() => {\r\n        if (isClient()) {\r\n            const url = new URL(window.location.href);\r\n            return url.searchParams.get('secret');\r\n        }\r\n\r\n        return '';\r\n    }, []);\r\n\r\n    const isValidUrlSecret = validate(urlSecret);\r\n\r\n    if (!isValidUrlSecret) {\r\n        if (isClient()) {\r\n            navigate('/404/');\r\n        }\r\n\r\n        return (\r\n            <Layout>\r\n                <SEO\r\n                    title={intl.formatMessage({ id: 'admin' })}\r\n                />\r\n                <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"h4\"\r\n                >\r\n                    {intl.formatMessage({ id: 'nothing_to_see' })}\r\n                </Typography>\r\n            </Layout>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO\r\n                title={intl.formatMessage({ id: 'admin' })}\r\n            />\r\n            <Typography\r\n                color=\"textPrimary\"\r\n                variant=\"h4\"\r\n            >\r\n                {intl.formatMessage({ id: 'admin' })}\r\n            </Typography>\r\n            <div\r\n                className={classes.pageContent}\r\n            >\r\n                <Typography\r\n                    className={classes.paragraph}\r\n                    color=\"textPrimary\"\r\n                    variant=\"body1\"\r\n                >\r\n                    {intl.formatMessage({ id: 'here_you_can_cancel' })}\r\n                </Typography>\r\n                <AdminForm googleFormData={googleFormData} urlSecret={urlSecret} />\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n"],"names":["useStyles","makeStyles","theme","copyBlockWrapper","marginTop","copyWrapper","display","copyButton","marginLeft","submitButton","addLinksButton","linkInput","paragraph","marginBottom","formWrapper","googleFormData","onSubmit","className","urlSecret","intl","useIntl","isShowingSnackbar","setIsShowingSnackbar","useState","isFormSubmitted","setIsFormSubmitted","classes","formMethods","useGoogleForm","form","submitToGoogleForms","formState","handleSubmit","formBody","useMemo","fields","map","field","id","type","label","extraProps","style","value","SHORT_ANSWER","ShortAnswerInput","LONG_ANSWER","LongAnswerInput","onFormSubmit","useCallback","data","event","then","target","reset","handleCloseSnackbar","FormControl","classNames","Button","variant","color","disabled","formatMessage","SnackBarAlert","onClose","severity","SUCCESS_MESSAGE_TYPE","show","messageKey","root","width","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","subtitle","pageContent","padding","pageContext","isClient","URL","window","location","href","searchParams","get","validate","Layout","SEO","title","Typography","navigate"],"sourceRoot":""}